steps:
# Access secrets and create .env.yaml
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "POSTGRES_USER: \"$$POSTGRES_USER\"
    POSTGRES_PASSWORD: \"$$POSTGRES_PASSWORD\"
    POSTGRES_HOST: \"$$POSTGRES_HOST\"
    POSTGRES_PORT: \"5432\"
    POSTGRES_DB: \"$$POSTGRES_DB\"
    CLOUD_SQL_INSTANCE: \"$$CLOUD_SQL_INSTANCE\"
    ENVIRONMENT: \"$$ENVIRONMENT\"" > .env.yaml
  secretEnv: ['POSTGRES_USER', 'POSTGRES_PASSWORD', 'POSTGRES_HOST', 'POSTGRES_DB', 'CLOUD_SQL_INSTANCE', 'ENVIRONMENT']

# Build the container image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/linkedin-ad-crawler', '.']

# Push the container image
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/linkedin-ad-crawler']

# Deploy to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
  - 'run'
  - 'deploy'
  - 'linkedin-ad-crawler'
  - '--image'
  - 'gcr.io/$PROJECT_ID/linkedin-ad-crawler'
  - '--region'
  - 'europe-west1'
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated'
  - '--port'
  - '8080'
  - '--set-env-vars'
  - 'PORT=8080'
  - '--memory'
  - '2Gi'
  - '--add-cloudsql-instances'
  - '${PROJECT_ID}:europe-west1:postgres'
  - '--env-vars-file'
  - '.env.yaml'

images:
- 'gcr.io/$PROJECT_ID/linkedin-ad-crawler'

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/POSTGRES_USER/versions/latest
    env: 'POSTGRES_USER'
  - versionName: projects/$PROJECT_ID/secrets/POSTGRES_PASSWORD/versions/latest
    env: 'POSTGRES_PASSWORD'
  - versionName: projects/$PROJECT_ID/secrets/POSTGRES_HOST/versions/latest
    env: 'POSTGRES_HOST'
  - versionName: projects/$PROJECT_ID/secrets/POSTGRES_DB/versions/latest
    env: 'POSTGRES_DB'
  - versionName: projects/$PROJECT_ID/secrets/CLOUD_SQL_INSTANCE/versions/latest
    env: 'CLOUD_SQL_INSTANCE'
  - versionName: projects/$PROJECT_ID/secrets/ENVIRONMENT/versions/latest
    env: 'ENVIRONMENT' 